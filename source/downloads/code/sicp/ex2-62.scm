(define (union-set set1 set2)
  (cond ((null? set1) set2)
        ((null? set2) (union-set (cdr set1) (reverse (cons (car set1) (reverse set2)))))
        (else
          (let ((x1 (car set1))
                (x2 (car set2)))
            (cond ((= x1 x2)
                   (union-set (cdr set1) set2))
                  ((< x1 x2)
                   (union-set (cdr set1) (cons x1 set2)))
                  ((< x2 x1)
                   (cons x2 (union-set set1 (cdr set2)))))))))

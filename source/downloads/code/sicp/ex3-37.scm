(define (c+ x y)
  (let ((z (make-connector)))
    (adder x y z)
    z))

(define (c- x y)
  (let ((z (make-connector)))
    (subtracer x y z)
    z))

(define (c* m1 m2)
  (let ((prod (make-connector)))
    (multiplier m1 m2 prod)
    prod))

(define (cv value)
  (let ((connector (make-connector)))
    (constant value connector)
    connector))

(define (c/ d1 d2)
  (let ((value (make-connector)))
    (divider d1 d2 value)
    value))

(define (subtracer x y z)
  (define (proccess-new-value)
    (cond ((and (has-value? x) (has-value? y))
           (set-value! z
                       (- (get-value x) (get-value y))
                       me))
          ((and (has-value? x) (has-value? z))
           (set-value! y
                       (- (get-value x) (get-value z))
                       me))
          ((and (has-value? y) (has-value? z))
           (set-value! x
                       (+ (get-value z) (get-value y))
                       me))))
  (define (process-forget-value)
    (forget-value! x me)
    (forget-value! y me)
    (forget-value! z me)
    (proccess-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (proccess-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else (error "Unknown request -- ADDER" request))))
  (connect x me)
  (connect y me)
  (connect z me)
  me)

(define (divider d1 d2 value)
  (define (process-new-value)
    (cond ((and (and (has-value? d1) (has-value? d2))
                (= (get-value d1) 0))
           (set-value! value 0 me))
          ((and (and (has-value? d1) (has-value? d2))
                (= (get-value d2) 0))
           (error "Dividend value 0" (get-value d2)))
          ((and (has-value? d1) (has-value? d2))
           (set-value! value
                       (/ (get-value d1)
                          (get-value d2))
                       me))
          ((and (has-value? d1) (has-value? value))
           (set-value! d2
                       (/ (get-value value)
                          (get-value d1))
                       me))
          ((and (has-value? d2) (has-value? value))
           (set-value! d1
                       (/ (get-value value)
                          (get-value d2))
                       me))))
  (define (process-forget-value)
    (forget-value! d1 me)
    (forget-value! d2 me)
    (forget-value! value me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else (error "Unknown request -- Divider" request))))
  (connect d1 me)
  (connect d2 me)
  (connect value me)
  me)

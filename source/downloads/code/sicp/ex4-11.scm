(define (enclosing-envrionment env) (cdr env))

(define (first-frame env) (car env))

(define the-empty-environment '())

(define (make-frame . variable-value-pairs)
  variable-value-pairs)

(define (frame-variables frame)
  (if (null? frame)
      '()
      (cons (car (car frame))
            (frame-variables (cdr frame)))))

(define (frame-values frame)
  (if (null? frame)
      '()
      (cons (cdr (car frame))
            (frame-values (cdr frame)))))

(define (add-binding-to-frame! var val frame)
  (cons (cons var val) frame))

(define (extend-environment var-val-pairs base-env)
  (cons (make-frame var-val-pairs) base-env))

(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan frame)
      (cond ((null? frame)
             (env-loop (enclosing-envrionment env)))
            ((eq? var (car (car frame)))
             (cadr (car frame)))
            (else (scan (cdr frame)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable" var)
        (scan (first-frame env))))
  (env-loop env))

(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan frame)
      (cond ((null? frame)
             (env-loop (enclosing-envrionment env)))
            ((eq? var (car (car frame)))
             (set-cdr! (car frame) val))
            (else (scan (cdr frame)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable - SET!" var)
        (scan (first-frame env))))
  (env-loop env))

(define (define-variable! var val env)
  (define (scan frame)
    (cond ((null? frame)
           (add-binding-to-frame! var val frame))
          ((eq? (car (car frame)))
           (set-cdr! (car frame) val))
          (else (scan (cdr frame)))))
  (scan (first-frame env)))

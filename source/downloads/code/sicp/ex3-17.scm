(define (count-pairs x)
  (let ((computed '()))
    (define (in? item lst)
      (cond ((null? lst) #f)
            ((eq? item (car lst)) #t)
            (else (in? item (cdr lst)))))
    (define (iter y)
      (cond ((not (pair? y)) 0)
            ((in? y computed) 0)
            (else (begin
                    (set! computed (cons y computed))
                    (+ (iter (car y))
                       (iter (cdr y))
                       1)))))
    (iter x)))

(define (augend s)
  (if (> (length s) 3)
      (cons '+ (cddr s))
      (caddr s)))

(define (make-sum a1 . an)
  (if (=number? (length an) 1)
    (let ((a2 (car an)))
      (cond ((=number? a1 0) a2)
            ((=number? a2 0) a1)
            ((and (number? a1) (number? a2)) (+ a1 a2))
            (else (list '+ a1 a2))))
    (cons '+ (cons a1 an))))

(define (multiplicand p)
  (if (> (length p) 3)
      (cons '* (cddr p))
      (caddr p)))

(define (make-product m1 . mn)
  (if (=number? (length mn) 1)
    (let ((m2 (car mn)))
      (cond ((or (=number? m1 0) (=number? m2 0)) 0)
            ((=number? m1 1) m2)
            ((=number? m2 2) m1)
            ((and (number? m1) (number? m2)) (* m1 m2))
            (else (list '* m1 m2))))
    (cons '* (cons m1 mn))))

(define (make-table)
  (define (key tree)
    (caar tree))
  (define (entry tree)
    (cdar tree))
  (define (children-tree tree)
    (cdar tree))
  (define (left-branch tree)
    (cadr tree))
  (define (right-branch tree)
    (caddr tree))
  (define (key=? key-1 key-2)
    (string=? (string key-1) (string key-2)))
  (define (key>? key-1 key-2)
    (string>? (string key-1) (string key-2)))
  (define (key<? key-1 key-2)
    (string<? (string key-1) (string key-2)))
  (define (make-tree given-key)
    (list (cons given-key '()) '() '()))
  (define (insert-tree! tree children)
    (cond ((not (pair? tree)) children)
          ((key=? (key tree) (key children)) children)
          ((key>? (key tree) (key children))
           (list (car tree)
                 (insert-tree! (left-branch tree) children)
                 (right-branch tree)))
          (else (list (car tree)
                      (left-branch tree)
                      (insert-tree! (right-branch tree) children)))))
  (define (set-value! tree value)
    (set-cdr! (car tree) value))
  (let ((local-table (make-tree '*table*)))
    (define (assoc given-key table)
      (cond ((not (pair? table)) #f)
            ((key=? given-key (key table)) table)
            ((key>? given-key (key table))
             (assoc given-key (right-branch table)))
            (else (assoc given-key (left-branch table)))))
    (define (lookup keys)
      (define (iter keys table)
        (if (null? keys)
            table
            (let ((subtable (assoc (car keys) table)))
              (if (not subtable)
                  #f
                  (iter (cdr keys) (children-tree subtable))))))
      (iter keys (children-tree local-table)))
    (define (insert! keys value)
      (define (iter table keys)
        (if (null? keys)
            (if (not (null? table))
              (begin
                (set-value! table value)
                'ok))
            (let ((subtable (assoc (car keys) (children-tree table))))
              (if (not subtable)
                  (begin
                    (set! subtable (make-tree (car keys)))
                    (set-cdr! (car table)
                              (insert-tree! (children-tree table) subtable))))
              (iter subtable (cdr keys)))))
      (iter local-table keys))
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            (else (error "Unkown operation -- TABLE" m))))
    dispatch))

(define operation-table (make-table))
(define get (operation-table 'lookup-proc))
(define put (operation-table 'insert-proc!))

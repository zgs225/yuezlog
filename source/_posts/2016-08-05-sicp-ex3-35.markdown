---
layout: mathjax
title: "sicp-ex3-35"
keywords:
  - 计算机程序的构造和解释,
  - 习题解答,
  - Structure and Interpretation of Computer Programs,
  - 练习3.35
date: 2016-08-05 08:01:03 +0800
comments: true
hidden: true
categories: draft
---

### 问题

Ben Bididdle 告诉 Louis，为了避免他在练习3.34中遇到的麻烦，一种方式是将平方器定义为一个新的基本约束。请填充 Ben 所给出的下面过程概要，实现这样的约束：

``` scheme
(define (squarer a b)
  (define (process-new-value)
    (if (has-value? b)
      (if (< (get-value b) 0)
          (error "square less than 0")))))
          <alternative>
      <alternative>
  (define (process-forget-value) <body1>)
  (define (me request) <body2>)
  <其他定义>
  me)
```

### 解答

{% include_code 练习3.35 lang:scheme sicp/ex3-35.scm %}

### 测试

``` scheme
(define a (make-connector))
(define b (make-connector))

(squarer a b)
$6 = #<procedure me (request)>

(probe "Squarer a: " a)
$7 = #<procedure me (request)>

(probe "Squarer b: " b)
$8 = #<procedure me (request)>

(set-value! a 10 'user)
Probe: Squarer a:  = 10
Probe: Squarer b:  = 100
$9 = done

(forget-value! a 'user)
Probe: Squarer a:  = ?
Probe: Squarer b:  = ?
$10 = done

(set-value! b 9 'user)
Probe: Squarer b:  = 9
Probe: Squarer a:  = 3
$11 = done
```

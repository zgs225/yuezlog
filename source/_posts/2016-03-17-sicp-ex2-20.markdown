---
layout: mathjax
title: "sicp-ex2-20"
keywords:
  - 计算机程序的构造和解释,
  - 习题解答,
  - Structure and Interpretation of Computer Programs,
date: 2016-03-17 07:05:52 +0800
comments: true
hidden: true
categories: draft
---

### 问题

过程`+`、`*`和`list`可以取任意个数的实际参数，定义这类过程的一种方式是采用一种带
点尾部记法的形式的`define`。在一个过程中，如果在形式参数表的最后一个参数之前有一
个点号，那就表明，当这一过程被实际调用时，前面各个形式参数（如果有的话）将以前面
的各个实际参数为值，与平常一样。但最后一个形式参数将以所有剩下的实际参数的表为值
。例如，假若我们定义了：

``` scheme
(define (f x y . z) <body>)
```

过程`f`就可以用两个以上的参数调用。如果求值：

``` scheme
(f 1 2 3 4 5 6)
```

那么在`f`的体里面，x将是1，y将是2，而z将是表(3 4 5 6)。给了定义：

``` scheme
(define (g . w) <body>)
```

那么过程`g`可以用0个或者多个参数调用。如果求值：

``` scheme
(g 1 2 3 4 5 6)
```

那么在`g`的体里面，`w`将是表(1 2 3 4 5 6)。

请采用这种记法形式写出过程`same-parity`，它以一个或者多个整数为参数，返回所有与
其第一个参数有着同样奇偶性的参数形成的表。例如：

``` scheme
(same-parity 1 2 3 4 5 6 7)
(1 3 5 7)

(same-parity 2 3 4 5 6 7)
(2 4 6)
```

### 解答

{% include_code 练习2.20 lang:scheme sicp/ex2-20.scm %}

### 测试

``` scheme
(same-parity 2 3 4 5 6 7 8 9 10)
;Value 21: (4 6 8 10)

(same-parity 1 3 2 5 6 7 8 9)
;Value 22: (3 5 7 9)
```

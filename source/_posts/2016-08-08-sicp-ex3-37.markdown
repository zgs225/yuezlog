---
layout: mathjax
title: "sicp-ex3-37"
keywords:
  - 计算机程序的构造和解释,
  - 习题解答,
  - Structure and Interpretation of Computer Programs,
date: 2016-08-08 06:57:04 +0800
comments: true
hidden: true
categories: draft
---

### 问题

与下面更具表达式风格的定义相比，过程`celsius-fahrenheit-converter`显得过于麻烦了：

``` scheme
(define (celsius-fahrenheit-converter x)
  (c+ (c* (c/ (cv 9) (cv5))
           x)
      (cv 32)))
      
(define C (make-connector))
(define F (celsius-fahrenheit-converter C))
```

这里的`c+`、`c*`等等是算术运算的“约束版”。例如，`c+`以两个连接器作为参数，返回另一个连接器，它与那两个连接器具有加法约束：

``` scheme
(define (c+ x y)
  (let ((z (make-connector)))
    (adder x y z)
    z))
```

请定义模拟过程`c-`、`c*`、`c/`和`cv`（常量值），使我们可以利用它们定义出各种复合约束，就像前面有关反门的例子。

### 解答

{% include_code 练习3.37 lang:scheme sicp/ex3-37.scm %}

### 测试

``` scheme
(probe "Celsius temp: " C)
$12 = #<procedure me (request)>

(probe "Fahrenheit temp: " F)
$13 = #<procedure me (request)>

(set-value! C 14 'user)
Probe: Celsius temp:  = 14
Probe: Fahrenheit temp:  = 286/5
$14 = done

(forget-value! C 'user)
Probe: Celsius temp:  = ?
Probe: Fahrenheit temp:  = ?
$15 = done

(set-value! C 0 'user)
Probe: Celsius temp:  = 0
Probe: Fahrenheit temp:  = 32
$16 = done

(forget-value! C 'user)
Probe: Celsius temp:  = ?
Probe: Fahrenheit temp:  = ?
$17 = done

(set-value! F 32 'user)
Probe: Fahrenheit temp:  = 32
Probe: Celsius temp:  = 0
$18 = done
```

---
layout: mathjax
title: "sicp-ex2-29"
keywords:
  - 计算机程序的构造和解释,
  - 习题解答,
  - Structure and Interpretation of Computer Programs,
date: 2016-03-24 00:00:57 +0800
comments: true
hidden: true
categories: draft
---

### 问题

一个二叉活动体由两个分支组成，一个是左分支，另一个是右分支。每个分支是一个具有确
定长度的杆，上面或者吊着一个重量，或者吊着另一个活动体。我们可以用复合数据对象表
示这种二叉活动体，将它通过其两个分支构造起来（例如，使用`list`）：

``` scheme
(define (make-mobile left right)
  (list left right))
```

分支可以从一个`length`（它应该是一个数）再加上一个`structure`构造出来，这个`structure`
或者是一个数（表示一个简单重量），或者是另一个活动体：

``` scheme
(define (make-branch length structure)
  (list length structure))
```

a) 请写出对应的选择函数`left-branch`和`right-branch`，它们分别返回活动体的两个分
支。还有`branch-length`和`branch-structure`。它们返回一个分支上的成分。

b) 用你的选择函数定义过程`total-weight`，它返回一个活动体的总重量。

c) 一个活动体称为是平衡的，如果其左分支的力矩等于其右分支的力矩（也就是说，如果
其左杆的长度乘以吊在杆上的重量，等于这个活动体右边同样的乘积），而且在其每个分支
上吊着的子活动体也平衡。请设计一个过程，它能检查一个二叉活动体是否平衡。

d) 假定我们改变活动体的表示，采用下面的构造方式：

``` scheme
(define (make-mobile left right)
  (cons left right))

(define (make-branch length structure)
  (cons length structure))
```

你需要对自己的程序做多少修改，才能将它改变为使用这种新表示？

### 解答

(b)小题的解题思路和练习2.28一样，累加活动体的左右分支重量。

\(c\)小题的解题思路是：

+ (1) 判断当前活动体是否平衡，如果平衡，跳到(2)；否则返回`#f`
+ (2) 将活动体左右分支当做新的活动体，回到(1)
+ (3) 如果新传递到(1)中的分支下不是一个活动体，返回`#t`
+ (4) 否则循环，直到所有活动体都被判断

{% include_code 练习2.29 lang:scheme sicp/ex2-29.scm %}

如果采用(d)小题的声明方式，那么需要对`right-branch`和`branch-structure`进行更改
后，程序能正常运行：

``` scheme
(define (right-branch mobile)
  (cdr mobile))

(define (branch-structure mobile)
  (cdr mobile))
```

### 测试

``` scheme
;; 测试 total-weight
(define mobile (make-mobile (make-branch 3
                                         (make-mobile (make-branch 5 13)
                                                      (make-branch 3 18)))
                            (make-branch 9
                                         (make-mobile (make-branch 4 18)
                                                      (make-branch 3 6)))))
;Value: mobile

(total-weight mobile)
;Value: 55

(total-weight (make-mobile (make-branch 3 4)
                           (make-branch 4 10)))
;Value: 14

;; 测试 balance-mobile?
(define bm (make-mobile (make-branch 3 4)
                        (make-branch 2 6)))
;Value: bm

(balance-mobile? bm)
;Value: #t

(define nbm (make-mobile (make-branch 3 5)
                         (make-branch 3 4)))
;Value: nbm

(balance-mobile? nbm)
;Value: #f

(define mobile (make-mobile (make-branch 3
                                         (make-mobile (make-branch 3 4)
                                                      (make-branch 2 6)))
                            (make-branch 3
                                         (make-mobile (make-branch 2 6)
                                                      (make-branch 3 4)))))
;Value: mobile

(balance-mobile? mobile)
;Value: #t

(define mobile (make-mobile (make-branch 4
                                         (make-mobile (make-branch 3 4)
                                                      (make-branch 2 6)))
                            (make-branch 2
                                         (make-mobile (make-branch 2 6)
                                                      (make-branch 3 4)))))
;Value: mobile

(balance-mobile? mobile)
;Value: #f

;; 测试小题(d)
(define mobile (make-mobile (make-branch 3 4)
                            (make-branch 4 3)))
;Value: mobile

(total-weight mobile)
;Value: 7

(balance-mobile? mobile)
;Value: #t

(right-branch mobile)
;Value 23: (4 . 3)

(left-branch mobile)
;Value 24: (3 . 4)

(branch-length (left-branch mobile))
;Value: 3

(branch-structure (left-branch mobile))
;Value: 4
```

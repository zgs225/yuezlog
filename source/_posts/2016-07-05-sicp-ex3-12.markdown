---
layout: mathjax
title: "sicp-ex3-12"
keywords:
  - 计算机程序的构造和解释,
  - 习题解答,
  - Structure and Interpretation of Computer Programs,
date: 2016-07-05 07:11:41 +0800
comments: true
hidden: true
categories: draft
---

### 问题

下面是2.2.1节介绍过的拼接表的过程：

``` scheme
(define (append x y)
  (if (null? x)
      y
      (cons (car x) (append (cdr x) y))))
```

`append`通过顺序将$x$的元素`cons`到$y$上的方式构造出一个新表。过程`append!`与`append`类似，但它是一个改变函数而不是构造函数。它将表拼接起来的方式是将两个表粘起来，修改$x$的最后一个序对，使它的`cdr`变成现在的$y$（对空的$x$调用`append!`将是一个错误）。

``` scheme
(define (append! x y)
  (set-cdr! (last-pair x) y)
  x)
```

这里的`last-pair`是一个过程，它返回其参数中的最后一个序对：

``` scheme
(define (last-pair x)
  (if (null? (cdr x))
      x
      (last-pair (cdr x))))
```

考虑下面的交互：

``` scheme
(define x (list 'a 'b))

(define y (list 'c 'd))

(define z (append x y))

z
(a b c d)

(cdr x)
<response>

(define w (append! x y))

w
(a b c d)

(cdr x)
<response>
```

其中缺少的那两个`<response>`是什么？请画出盒子指针图形，解释你的回答。

### 解答

第一处`<response>`的值是`(d)`；第二处`<response>`的值是`(b c d)`。这是因为调用`append`过程拼接两个表是通过构造出新的表实现；而`append!`拼接表将$x$的最后一个元素的`cdr`指针改变，从而也改变了$x$的值。

`append`之后$x$的盒子模型如下图：

{% lazy_img lazy no-shadow photos/sicp/盒子指针x.png 333 165 练习3.12 %}

调用`append!`之后其结构变成如下所示：

{% lazy_img lazy no-shadow photos/sicp/盒子指针x2.png 537 165 练习3.12 %}
